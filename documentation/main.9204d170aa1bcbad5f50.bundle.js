(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1048:function(module,exports){function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=function(){return[]},webpackEmptyContext.resolve=webpackEmptyContext,module.exports=webpackEmptyContext,webpackEmptyContext.id=1048},1049:function(module,exports){function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=function(){return[]},webpackEmptyContext.resolve=webpackEmptyContext,module.exports=webpackEmptyContext,webpackEmptyContext.id=1049},1050:function(module,exports,__webpack_require__){var map={"./Core.stories.js":1265,"./Introduction.stories.js":1262,"./Theme.stories.js":1260};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1050},1260:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),build=__webpack_require__(11),_ref=react_default.a.createElement(build.Heading,{tag:"h3",color:"warning"},"Привет, я заголовок, стилизованный темой");function Theme(){return _ref}Theme.displayName="Theme";Theme.__docgenInfo={description:"Тема, или файл переменных цветов, тайминговых функций, шрифтов, отступов и прочего.\n\nСпецификация https://system-ui.com/theme",methods:[],displayName:"Theme"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Theme.js"]={name:"Theme",docgenInfo:Theme.__docgenInfo,path:"src/Theme.js"});__webpack_require__(37),__webpack_require__(9);var slicedToArray=__webpack_require__(360),slicedToArray_default=__webpack_require__.n(slicedToArray),theme_build=__webpack_require__(76),colors=__webpack_require__.n(theme_build).a.colors;function Palette(){var _useState=Object(react.useState)(!0),_useState2=slicedToArray_default()(_useState,2);_useState2[0],_useState2[1];return console.log(colors),react_default.a.createElement(build.Flex,{flexWrap:"wrap"},Object.keys(colors.system).map((function(color){if("info"!==color&&"highlightHover"!==color)return react_default.a.createElement(build.Card,{key:color,width:110,borderColor:color,borderRadius:1,mr:3,mb:3},react_default.a.createElement(build.Box,{height:80,bg:color}),react_default.a.createElement(build.Divider,{color:color,mt:0}),react_default.a.createElement(build.Text,{truncated:!0,title:color,align:"center",my:2,px:1},react_default.a.createElement(build.Text,null,color)))})))}Palette.displayName="Palette";var src_Palette=Palette;Palette.__docgenInfo={description:"",methods:[],displayName:"Palette"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Palette.js"]={name:"Palette",docgenInfo:Palette.__docgenInfo,path:"src/Palette.js"}),__webpack_require__.d(__webpack_exports__,"basic",(function(){return basic})),__webpack_require__.d(__webpack_exports__,"ThemeProviderImport",(function(){return ThemeProviderImport})),__webpack_require__.d(__webpack_exports__,"colors",(function(){return Theme_stories_colors})),__webpack_require__.d(__webpack_exports__,"colorsInAConsumer",(function(){return colorsInAConsumer})),__webpack_require__.d(__webpack_exports__,"colorsAdaptive",(function(){return colorsAdaptive})),__webpack_require__.d(__webpack_exports__,"fonts",(function(){return fonts}));__webpack_require__(160).withSource;var __SOURCE_PREFIX__="/media/eargo/FilesHDD/repos/URSiP/design-system-storybook-docs/packages/documentation/stories",__STORY__="import React, {useState} from 'react';\n\nimport {Theme} from '../src/Theme';\nimport Palette from \"../src/Palette\";\nimport {Flex,Heading,Box} from \"@design-system/atoms\";\n\nexport default {\n    title: 'Design System|Theme',\n    parameters: {\n        component: Theme,\n    },\n};\n\nexport const basic = () => (<Theme/>\n);\nbasic.story = {\n    parameters: {\n        info: {\n            text: `\n                      \n             Для кастомизации стандартной темы можно создать свой файл\n             \n             \\`\\`\\`js static\n            // custom-theme.js\n            import theme  from '@design-system/theme'\n            \n            export default {\n                // Копируем значения стандартной темы для их дальнейшей перезаписи\n                ...theme,\n                // Свои отступы для margin и padding в px \n                space: [0, 2, 4, 8, 16, 32, 64],\n                // Свой шрифт\n                font: {\n                    ...defaultTheme.font,\n                    main: \\`'Comic Sans'\\`,\n                },\n                // Своя сетка размеров шрифта в px \n                fontSizes: [10, 12, 14, 18, 22, 30, 46],\n                // Свои цвета\n                colors: {\n                    ...defaultTheme.colors,\n                    primary: 'tomato'\n                }\n            }\n            \\`\\`\\`\n        `\n        },\n    },\n};\n\nexport const ThemeProviderImport = () => {}\nThemeProviderImport.story = {\n    parameters: {\n        info: {\n            text: `\n            И импортировать его в \\`<ThemeProvider />\\`\n            \n            \\`\\`\\`js static\n            import React from 'react'\n            import { ThemeProvider} from '@design-system/theme'\n            import {Heading} from '@design-system/atoms'\n            import theme from './custom-theme'\n            \n            function App() {\n                return (\n                  <ThemeProvider theme={theme}>\n                    <Heading color=\"primary\">You are welcome!</Heading>\n                  </ThemeProvider>\n                )\n            }\n            \n            export default App\n            \\`\\`\\`\n        `\n        }\n    }\n}\n\n\nexport const colors = () => (<Palette/>\n);\ncolors.story = {\n    parameters: {\n        info: {\n            text: `\n           ### Системные цвета\n            Назначаются из палитры. \n                \n            Некоторые компоненты (таке, как иконки) не принимают на вход никаких цветов, за исключением этих. \n            Другие компоненты (такие как Box) могут принимать любые цвета. Однако такое использование строго \n            не рекомендуется. \n            \n            В будущих версиях дизайн-системы все компоненты будут ограничены только цветами из системной палитры.\n            \n            Список цветов доступен в **theme.colors** в виде плоского объекта:\n            \n                \n                {\n                    primary: \"#0091ea\",\n                    success: \"#66bb6a\",\n                    black: \"#3a3a3a\",\n                    white: \"#ffffff\",\n                    blue: \"#0091ea\",\n                    lightBlue: \"#1e88e5\",\n                    lightGrey: \"#f5f5f5\",\n                    // ...\n                }\n            \n        `\n        },\n    },\n};\n\n\nexport const colorsInAConsumer = () => (\n    <Flex flexDirection={'column'}>\n        <Heading color=\"#ebebeb\">Ghost heading</Heading>\n        <Heading color=\"pink\">Default browser color heading</Heading>\n        <Heading color=\"#ebebeb\">Ghost heading</Heading>\n        <Heading color=\"pink\">Default browser color heading</Heading>\n    </Flex>\n);\ncolorsInAConsumer.story = {\n    parameters: {\n        info: {\n            text: `\n           В случае большинства компонентов если передаваемый цвет не найден в объекте, то он применится, \n           как обычная строка в css color\n        `\n        },\n    },\n};\n\nexport const colorsAdaptive = () => (\n    <Flex flexDirection={'column'}>\n        <Box bg={['primary', 'error', 'success' ]} p={4}>\n            Responsive background color\n        </Box>\n        <Box bg={['primary', 'error', 'success' ]} p={4}>\n            Responsive background color\n        </Box>\n    </Flex>\n);\ncolorsAdaptive.story = {\n    parameters: {\n        info: {\n            text: `\n           Поддерживается использование массива значений для поддержки адаптивного дизайна.\n           \n           *Изменяйте ширину экрана для проверки работы массива цветов.*\n        `\n        },\n    },\n};\n\nexport const fonts = () => {}\nfonts.story = {\n    parameters: {\n        info: {\n            text: `\n                Шрифты хранятся в **theme.fonts**\n                                    \n                    theme.font: {\n                        // Основной шрифт. Текст, кнопки и тд\n                        main: '\"PT Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n                        // Шрифт для заголовков. Можно использовать такой же, как и main, либо выбрать другой\n                        heading: '\"PT Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n                        // Моноширинный шрифт\n                        monospaced: '\"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace',\n                    }\n                    \n                Запись шрифтов через запятую означает, что если браузер не найдет первый шрифт, то будет применен следующий по списку.\n                \n                **Система физически не хранит в себе шрифты, в ней можно указать только названия, поэтому файлы шрифтов \n                должны быть загружены и подключены в приложении, в котором мы подключаем \\`<ThemeProvider />\\`**\n        `\n        },\n    },\n};\n",__ADDS_MAP__={"design-system-theme--basic":{startLoc:{col:21,line:14},endLoc:{col:1,line:15},startBody:{col:21,line:14},endBody:{col:1,line:15}},"design-system-theme--theme-provider-import":{startLoc:{col:35,line:51},endLoc:{col:43,line:51},startBody:{col:35,line:51},endBody:{col:43,line:51}},"design-system-theme--colors":{startLoc:{col:22,line:80},endLoc:{col:1,line:81},startBody:{col:22,line:80},endBody:{col:1,line:81}},"design-system-theme--colors-in-a-consumer":{startLoc:{col:33,line:115},endLoc:{col:1,line:122},startBody:{col:33,line:115},endBody:{col:1,line:122}},"design-system-theme--colors-adaptive":{startLoc:{col:30,line:134},endLoc:{col:1,line:143},startBody:{col:30,line:134},endBody:{col:1,line:143}},"design-system-theme--fonts":{startLoc:{col:21,line:156},endLoc:{col:29,line:156},startBody:{col:21,line:156},endBody:{col:29,line:156}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},addSourceDecorator=__webpack_require__(160).addSource,Theme_stories_ref=(__webpack_exports__.default={title:"Design System|Theme",parameters:{storySource:{source:"import React, {useState} from 'react';\n\nimport {Theme} from '../src/Theme';\nimport Palette from \"../src/Palette\";\nimport {Flex,Heading,Box} from \"@design-system/atoms\";\n\nexport default {\n    title: 'Design System|Theme',\n    parameters: {\n        component: Theme,\n    },\n};\n\nexport const basic = () => (<Theme/>\n);\nbasic.story = {\n    parameters: {\n        info: {\n            text: `\n                      \n             Для кастомизации стандартной темы можно создать свой файл\n             \n             \\`\\`\\`js static\n            // custom-theme.js\n            import theme  from '@design-system/theme'\n            \n            export default {\n                // Копируем значения стандартной темы для их дальнейшей перезаписи\n                ...theme,\n                // Свои отступы для margin и padding в px \n                space: [0, 2, 4, 8, 16, 32, 64],\n                // Свой шрифт\n                font: {\n                    ...defaultTheme.font,\n                    main: \\`'Comic Sans'\\`,\n                },\n                // Своя сетка размеров шрифта в px \n                fontSizes: [10, 12, 14, 18, 22, 30, 46],\n                // Свои цвета\n                colors: {\n                    ...defaultTheme.colors,\n                    primary: 'tomato'\n                }\n            }\n            \\`\\`\\`\n        `\n        },\n    },\n};\n\nexport const ThemeProviderImport = () => {}\nThemeProviderImport.story = {\n    parameters: {\n        info: {\n            text: `\n            И импортировать его в \\`<ThemeProvider />\\`\n            \n            \\`\\`\\`js static\n            import React from 'react'\n            import { ThemeProvider} from '@design-system/theme'\n            import {Heading} from '@design-system/atoms'\n            import theme from './custom-theme'\n            \n            function App() {\n                return (\n                  <ThemeProvider theme={theme}>\n                    <Heading color=\"primary\">You are welcome!</Heading>\n                  </ThemeProvider>\n                )\n            }\n            \n            export default App\n            \\`\\`\\`\n        `\n        }\n    }\n}\n\n\nexport const colors = () => (<Palette/>\n);\ncolors.story = {\n    parameters: {\n        info: {\n            text: `\n           ### Системные цвета\n            Назначаются из палитры. \n                \n            Некоторые компоненты (таке, как иконки) не принимают на вход никаких цветов, за исключением этих. \n            Другие компоненты (такие как Box) могут принимать любые цвета. Однако такое использование строго \n            не рекомендуется. \n            \n            В будущих версиях дизайн-системы все компоненты будут ограничены только цветами из системной палитры.\n            \n            Список цветов доступен в **theme.colors** в виде плоского объекта:\n            \n                \n                {\n                    primary: \"#0091ea\",\n                    success: \"#66bb6a\",\n                    black: \"#3a3a3a\",\n                    white: \"#ffffff\",\n                    blue: \"#0091ea\",\n                    lightBlue: \"#1e88e5\",\n                    lightGrey: \"#f5f5f5\",\n                    // ...\n                }\n            \n        `\n        },\n    },\n};\n\n\nexport const colorsInAConsumer = () => (\n    <Flex flexDirection={'column'}>\n        <Heading color=\"#ebebeb\">Ghost heading</Heading>\n        <Heading color=\"pink\">Default browser color heading</Heading>\n        <Heading color=\"#ebebeb\">Ghost heading</Heading>\n        <Heading color=\"pink\">Default browser color heading</Heading>\n    </Flex>\n);\ncolorsInAConsumer.story = {\n    parameters: {\n        info: {\n            text: `\n           В случае большинства компонентов если передаваемый цвет не найден в объекте, то он применится, \n           как обычная строка в css color\n        `\n        },\n    },\n};\n\nexport const colorsAdaptive = () => (\n    <Flex flexDirection={'column'}>\n        <Box bg={['primary', 'error', 'success' ]} p={4}>\n            Responsive background color\n        </Box>\n        <Box bg={['primary', 'error', 'success' ]} p={4}>\n            Responsive background color\n        </Box>\n    </Flex>\n);\ncolorsAdaptive.story = {\n    parameters: {\n        info: {\n            text: `\n           Поддерживается использование массива значений для поддержки адаптивного дизайна.\n           \n           *Изменяйте ширину экрана для проверки работы массива цветов.*\n        `\n        },\n    },\n};\n\nexport const fonts = () => {}\nfonts.story = {\n    parameters: {\n        info: {\n            text: `\n                Шрифты хранятся в **theme.fonts**\n                                    \n                    theme.font: {\n                        // Основной шрифт. Текст, кнопки и тд\n                        main: '\"PT Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n                        // Шрифт для заголовков. Можно использовать такой же, как и main, либо выбрать другой\n                        heading: '\"PT Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n                        // Моноширинный шрифт\n                        monospaced: '\"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace',\n                    }\n                    \n                Запись шрифтов через запятую означает, что если браузер не найдет первый шрифт, то будет применен следующий по списку.\n                \n                **Система физически не хранит в себе шрифты, в ней можно указать только названия, поэтому файлы шрифтов \n                должны быть загружены и подключены в приложении, в котором мы подключаем \\`<ThemeProvider />\\`**\n        `\n        },\n    },\n};\n",locationsMap:{"design-system-theme--basic":{startLoc:{col:21,line:14},endLoc:{col:1,line:15},startBody:{col:21,line:14},endBody:{col:1,line:15}},"design-system-theme--theme-provider-import":{startLoc:{col:35,line:51},endLoc:{col:43,line:51},startBody:{col:35,line:51},endBody:{col:43,line:51}},"design-system-theme--colors":{startLoc:{col:22,line:80},endLoc:{col:1,line:81},startBody:{col:22,line:80},endBody:{col:1,line:81}},"design-system-theme--colors-in-a-consumer":{startLoc:{col:33,line:115},endLoc:{col:1,line:122},startBody:{col:33,line:115},endBody:{col:1,line:122}},"design-system-theme--colors-adaptive":{startLoc:{col:30,line:134},endLoc:{col:1,line:143},startBody:{col:30,line:134},endBody:{col:1,line:143}},"design-system-theme--fonts":{startLoc:{col:21,line:156},endLoc:{col:29,line:156},startBody:{col:21,line:156},endBody:{col:29,line:156}}}},component:Theme}},react_default.a.createElement(Theme,null)),basic=addSourceDecorator((function(){return Theme_stories_ref}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Theme.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});basic.story={parameters:{info:{text:"\n                      \n             Для кастомизации стандартной темы можно создать свой файл\n             \n             ```js static\n            // custom-theme.js\n            import theme  from '@design-system/theme'\n            \n            export default {\n                // Копируем значения стандартной темы для их дальнейшей перезаписи\n                ...theme,\n                // Свои отступы для margin и padding в px \n                space: [0, 2, 4, 8, 16, 32, 64],\n                // Свой шрифт\n                font: {\n                    ...defaultTheme.font,\n                    main: `'Comic Sans'`,\n                },\n                // Своя сетка размеров шрифта в px \n                fontSizes: [10, 12, 14, 18, 22, 30, 46],\n                // Свои цвета\n                colors: {\n                    ...defaultTheme.colors,\n                    primary: 'tomato'\n                }\n            }\n            ```\n        "}}};var ThemeProviderImport=addSourceDecorator((function(){}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Theme.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});ThemeProviderImport.story={parameters:{info:{text:"\n            И импортировать его в `<ThemeProvider />`\n            \n            ```js static\n            import React from 'react'\n            import { ThemeProvider} from '@design-system/theme'\n            import {Heading} from '@design-system/atoms'\n            import theme from './custom-theme'\n            \n            function App() {\n                return (\n                  <ThemeProvider theme={theme}>\n                    <Heading color=\"primary\">You are welcome!</Heading>\n                  </ThemeProvider>\n                )\n            }\n            \n            export default App\n            ```\n        "}}};var _ref2=react_default.a.createElement(src_Palette,null),Theme_stories_colors=addSourceDecorator((function(){return _ref2}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Theme.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Theme_stories_colors.story={parameters:{info:{text:'\n           ### Системные цвета\n            Назначаются из палитры. \n                \n            Некоторые компоненты (таке, как иконки) не принимают на вход никаких цветов, за исключением этих. \n            Другие компоненты (такие как Box) могут принимать любые цвета. Однако такое использование строго \n            не рекомендуется. \n            \n            В будущих версиях дизайн-системы все компоненты будут ограничены только цветами из системной палитры.\n            \n            Список цветов доступен в **theme.colors** в виде плоского объекта:\n            \n                \n                {\n                    primary: "#0091ea",\n                    success: "#66bb6a",\n                    black: "#3a3a3a",\n                    white: "#ffffff",\n                    blue: "#0091ea",\n                    lightBlue: "#1e88e5",\n                    lightGrey: "#f5f5f5",\n                    // ...\n                }\n            \n        '}}};var _ref3=react_default.a.createElement(build.Flex,{flexDirection:"column"},react_default.a.createElement(build.Heading,{color:"#ebebeb"},"Ghost heading"),react_default.a.createElement(build.Heading,{color:"pink"},"Default browser color heading"),react_default.a.createElement(build.Heading,{color:"#ebebeb"},"Ghost heading"),react_default.a.createElement(build.Heading,{color:"pink"},"Default browser color heading")),colorsInAConsumer=addSourceDecorator((function(){return _ref3}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Theme.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});colorsInAConsumer.story={parameters:{info:{text:"\n           В случае большинства компонентов если передаваемый цвет не найден в объекте, то он применится, \n           как обычная строка в css color\n        "}}};var colorsAdaptive=addSourceDecorator((function(){return react_default.a.createElement(build.Flex,{flexDirection:"column"},react_default.a.createElement(build.Box,{bg:["primary","error","success"],p:4},"Responsive background color"),react_default.a.createElement(build.Box,{bg:["primary","error","success"],p:4},"Responsive background color"))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Theme.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});colorsAdaptive.story={parameters:{info:{text:"\n           Поддерживается использование массива значений для поддержки адаптивного дизайна.\n           \n           *Изменяйте ширину экрана для проверки работы массива цветов.*\n        "}}};var fonts=addSourceDecorator((function(){}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Theme.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});fonts.story={parameters:{info:{text:'\n                Шрифты хранятся в **theme.fonts**\n                                    \n                    theme.font: {\n                        // Основной шрифт. Текст, кнопки и тд\n                        main: \'"PT Sans", "Helvetica Neue", Helvetica, Arial, sans-serif\',\n                        // Шрифт для заголовков. Можно использовать такой же, как и main, либо выбрать другой\n                        heading: \'"PT Sans", "Helvetica Neue", Helvetica, Arial, sans-serif\',\n                        // Моноширинный шрифт\n                        monospaced: \'"SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace\',\n                    }\n                    \n                Запись шрифтов через запятую означает, что если браузер не найдет первый шрифт, то будет применен следующий по списку.\n                \n                **Система физически не хранит в себе шрифты, в ней можно указать только названия, поэтому файлы шрифтов \n                должны быть загружены и подключены в приложении, в котором мы подключаем `<ThemeProvider />`**\n        '}}}},1262:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),build=__webpack_require__(11),_ref=react_default.a.createElement(build.Text,{align:"right",mt:3},react_default.a.createElement(build.Button,null,"Ok"));function Introduction(){return _ref}Introduction.displayName="Introduction";Introduction.__docgenInfo={description:"Дизайн-система  —  это целостный визуальный язык и его техническое отражение в виде библиотеки компонентов",methods:[],displayName:"Introduction"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Introduction.js"]={name:"Introduction",docgenInfo:Introduction.__docgenInfo,path:"src/Introduction.js"}),__webpack_require__.d(__webpack_exports__,"introduction",(function(){return introduction})),__webpack_require__.d(__webpack_exports__,"Installation",(function(){return Installation})),__webpack_require__.d(__webpack_exports__,"integration",(function(){return integration}));__webpack_require__(160).withSource;var __SOURCE_PREFIX__="/media/eargo/FilesHDD/repos/URSiP/design-system-storybook-docs/packages/documentation/stories",__STORY__="import React, {useState} from 'react'\n\nimport {Introduction} from '../src/Introduction'\nimport {Card, Heading, Text, Box} from '@design-system/atoms'\n\nexport default {\n  title: 'Design System|Introduction',\n  parameters: {\n    component: Introduction\n  }\n}\n\nexport const introduction = () => ( <Card width={360} p={4} bg={'white'}>\n      <Box bg={'white'}>\n      <Heading tag=\"h4\">Внимание! Важное уведомление</Heading>\n      <Text fontSize={1} mt={3}>\n        Сохраните все данные и завершите работу <strong>до 19:00</strong>.\n        Система будет обновлена.\n      </Text>\n      <Introduction />\n\n      </Box>\n    </Card>)\n\nintroduction.story = {\n  parameters: {\n    info: {\n      text: `\n          Пример реализации комплексного компонента путем комбинирования примитивов и простых элементов\n          **нажмите \"VIEW CODE\" для просмотра исходного кода примера.**\n        `\n    }\n  }\n}\n\nexport const Installation = () => {\n}\nInstallation.story = {\n  parameters: {\n    info: {\n      text: `\n          Библиотека хостится в нашем корпоративном артифактории внутри локальной сети, поэтому перед установкой необходимо убедиться, что **yarn** правильно настроен. Для этого можно выполнить команду:\n          ~~~\n          yarn config list\n          ~~~\n          \n          Параметр **registry** должен содержать ссылку на https://gitlab.ursip.ru/nexus/repository/npm. Если это не так, то необходимо его явно указать:\n          \\`\\`\\`js static\n          yarn config set registry https://gitlab.ursip.ru/nexus/repository/npm\n          \\`\\`\\`\n          \n          Далее для установки библиотеки необходимо выполнить команду:\n          \\`\\`\\`js static\n          npm install --save @ursip/design-system \n          \\`\\`\\`\n        `\n    }\n  }\n}\n\nexport const integration = () => {}\n\nintegration.story = {\n  parameters: {\n    info: {\n      text: `\n          Для работы библиотеки необходимо обернуть приложение в \\`<ThemeProvider />\\`\n          Этот компонент является оберткой над провайдером из styled-components (https://www.styled-components.com/docs/advanced/#theming).\n\n               \\`\\`\\`js static\n              // App.js\n              import React from 'react'\n              import { ThemeProvider, Heading, theme } from '@ursip/design-system'\n              \n              function App() {\n                  return (\n                    <ThemeProvider theme={theme}>\n                      <Heading>You are welcome!</Heading>\n                    </ThemeProvider>\n                  )\n              }\n              \n              export default App\n              \\`\\`\\`\n                      `\n    }\n  }\n}\n",__ADDS_MAP__={"design-system-introduction--introduction":{startLoc:{col:28,line:13},endLoc:{col:12,line:23},startBody:{col:28,line:13},endBody:{col:12,line:23}},"design-system-introduction--installation":{startLoc:{col:28,line:36},endLoc:{col:1,line:37},startBody:{col:28,line:36},endBody:{col:1,line:37}},"design-system-introduction--integration":{startLoc:{col:27,line:61},endLoc:{col:35,line:61},startBody:{col:27,line:61},endBody:{col:35,line:61}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},addSourceDecorator=__webpack_require__(160).addSource,Introduction_stories_ref=(__webpack_exports__.default={title:"Design System|Introduction",parameters:{storySource:{source:"import React, {useState} from 'react'\n\nimport {Introduction} from '../src/Introduction'\nimport {Card, Heading, Text, Box} from '@design-system/atoms'\n\nexport default {\n  title: 'Design System|Introduction',\n  parameters: {\n    component: Introduction\n  }\n}\n\nexport const introduction = () => ( <Card width={360} p={4} bg={'white'}>\n      <Box bg={'white'}>\n      <Heading tag=\"h4\">Внимание! Важное уведомление</Heading>\n      <Text fontSize={1} mt={3}>\n        Сохраните все данные и завершите работу <strong>до 19:00</strong>.\n        Система будет обновлена.\n      </Text>\n      <Introduction />\n\n      </Box>\n    </Card>)\n\nintroduction.story = {\n  parameters: {\n    info: {\n      text: `\n          Пример реализации комплексного компонента путем комбинирования примитивов и простых элементов\n          **нажмите \"VIEW CODE\" для просмотра исходного кода примера.**\n        `\n    }\n  }\n}\n\nexport const Installation = () => {\n}\nInstallation.story = {\n  parameters: {\n    info: {\n      text: `\n          Библиотека хостится в нашем корпоративном артифактории внутри локальной сети, поэтому перед установкой необходимо убедиться, что **yarn** правильно настроен. Для этого можно выполнить команду:\n          ~~~\n          yarn config list\n          ~~~\n          \n          Параметр **registry** должен содержать ссылку на https://gitlab.ursip.ru/nexus/repository/npm. Если это не так, то необходимо его явно указать:\n          \\`\\`\\`js static\n          yarn config set registry https://gitlab.ursip.ru/nexus/repository/npm\n          \\`\\`\\`\n          \n          Далее для установки библиотеки необходимо выполнить команду:\n          \\`\\`\\`js static\n          npm install --save @ursip/design-system \n          \\`\\`\\`\n        `\n    }\n  }\n}\n\nexport const integration = () => {}\n\nintegration.story = {\n  parameters: {\n    info: {\n      text: `\n          Для работы библиотеки необходимо обернуть приложение в \\`<ThemeProvider />\\`\n          Этот компонент является оберткой над провайдером из styled-components (https://www.styled-components.com/docs/advanced/#theming).\n\n               \\`\\`\\`js static\n              // App.js\n              import React from 'react'\n              import { ThemeProvider, Heading, theme } from '@ursip/design-system'\n              \n              function App() {\n                  return (\n                    <ThemeProvider theme={theme}>\n                      <Heading>You are welcome!</Heading>\n                    </ThemeProvider>\n                  )\n              }\n              \n              export default App\n              \\`\\`\\`\n                      `\n    }\n  }\n}\n",locationsMap:{"design-system-introduction--introduction":{startLoc:{col:28,line:13},endLoc:{col:12,line:23},startBody:{col:28,line:13},endBody:{col:12,line:23}},"design-system-introduction--installation":{startLoc:{col:28,line:36},endLoc:{col:1,line:37},startBody:{col:28,line:36},endBody:{col:1,line:37}},"design-system-introduction--integration":{startLoc:{col:27,line:61},endLoc:{col:35,line:61},startBody:{col:27,line:61},endBody:{col:35,line:61}}}},component:Introduction}},react_default.a.createElement(build.Card,{width:360,p:4,bg:"white"},react_default.a.createElement(build.Box,{bg:"white"},react_default.a.createElement(build.Heading,{tag:"h4"},"Внимание! Важное уведомление"),react_default.a.createElement(build.Text,{fontSize:1,mt:3},"Сохраните все данные и завершите работу ",react_default.a.createElement("strong",null,"до 19:00"),". Система будет обновлена."),react_default.a.createElement(Introduction,null)))),introduction=addSourceDecorator((function(){return Introduction_stories_ref}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Introduction.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});introduction.story={parameters:{info:{text:'\n          Пример реализации комплексного компонента путем комбинирования примитивов и простых элементов\n          **нажмите "VIEW CODE" для просмотра исходного кода примера.**\n        '}}};var Installation=addSourceDecorator((function(){}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Introduction.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});Installation.story={parameters:{info:{text:"\n          Библиотека хостится в нашем корпоративном артифактории внутри локальной сети, поэтому перед установкой необходимо убедиться, что **yarn** правильно настроен. Для этого можно выполнить команду:\n          ~~~\n          yarn config list\n          ~~~\n          \n          Параметр **registry** должен содержать ссылку на https://gitlab.ursip.ru/nexus/repository/npm. Если это не так, то необходимо его явно указать:\n          ```js static\n          yarn config set registry https://gitlab.ursip.ru/nexus/repository/npm\n          ```\n          \n          Далее для установки библиотеки необходимо выполнить команду:\n          ```js static\n          npm install --save @ursip/design-system \n          ```\n        "}}};var integration=addSourceDecorator((function(){}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Introduction.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});integration.story={parameters:{info:{text:"\n          Для работы библиотеки необходимо обернуть приложение в `<ThemeProvider />`\n          Этот компонент является оберткой над провайдером из styled-components (https://www.styled-components.com/docs/advanced/#theming).\n\n               ```js static\n              // App.js\n              import React from 'react'\n              import { ThemeProvider, Heading, theme } from '@ursip/design-system'\n              \n              function App() {\n                  return (\n                    <ThemeProvider theme={theme}>\n                      <Heading>You are welcome!</Heading>\n                    </ThemeProvider>\n                  )\n              }\n              \n              export default App\n              ```\n                      "}}}},1265:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),build=__webpack_require__(11),Link=__webpack_require__(19).default.a.withConfig({displayName:"Core__Link",componentId:"sc-3myjnh-0"})(["color:",";:hover{cursor:pointer;color:",";}"],(function(props){return props.theme.colors.primary}),(function(props){return props.theme.colors.onclick})),_ref=react_default.a.createElement(build.Flex,{flexDirection:"column"},react_default.a.createElement(build.Box,{width:1,m:1},react_default.a.createElement(build.Text,null,"В основе этой библиотеки используются решения:")),react_default.a.createElement(build.Box,{width:1,mb:1},react_default.a.createElement(build.Text,null,react_default.a.createElement(build.Text,{inline:!0,bold:!0,mr:1}," ",react_default.a.createElement(Link,{href:"https://www.styled-components.com/"},"styled-components")),"- для создания базовых компонентов и управления css-правилами по концепции CSS-in-JS ")),react_default.a.createElement(build.Box,{width:1,mb:1},react_default.a.createElement(build.Text,null,react_default.a.createElement(build.Text,{inline:!0,bold:!0,mr:1}," ",react_default.a.createElement(Link,{href:"https://jxnblk.com/styled-system/"},"styled-system")),"- содержит коллекцию функций, расширяющих компоненты свойствами, которые позволяют управлять стилями на основе заранее прописанных параметров темы. ")));function Core(){return _ref}Core.displayName="Core";Core.__docgenInfo={description:"Методы применения дизайн-системы",methods:[],displayName:"Core"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Core.js"]={name:"Core",docgenInfo:Core.__docgenInfo,path:"src/Core.js"}),__webpack_require__.d(__webpack_exports__,"basic",(function(){return basic})),__webpack_require__.d(__webpack_exports__,"coloringTheBox",(function(){return coloringTheBox})),__webpack_require__.d(__webpack_exports__,"MoreFunctions",(function(){return MoreFunctions})),__webpack_require__.d(__webpack_exports__,"spacing",(function(){return spacing})),__webpack_require__.d(__webpack_exports__,"mediaQueriesAndBreakpoints",(function(){return mediaQueriesAndBreakpoints}));__webpack_require__(160).withSource;var __SOURCE_PREFIX__="/media/eargo/FilesHDD/repos/URSiP/design-system-storybook-docs/packages/documentation/stories",__STORY__="import React, {useState} from 'react';\n\nimport {Core} from '../src/Core';\nimport {Flex, Box, Text, ContentBox} from \"@design-system/atoms\";\n\nexport default {\n    title: 'Design System|Core',\n    parameters: {\n        component: Core,\n    },\n};\n\nexport const basic = () => (<Core/>\n);\nbasic.story = {\n    parameters: {\n        info: {\n            text: `\n          ### Как это работает?\n          Создадим компонент Box и добавим в него функцию **color**:\n          \n              \n              import styled from 'styled-components'\n              import {color} from 'styled-system'\n              \n              const Box = styled.div\\`\n                  \\${color}\n                \\`\n              \n              export default Box\n\n        `\n        },\n    },\n};\n\nexport const coloringTheBox = () => {\n    return (\n            <Box color=\"#fff\" bg=\"tomato\">\n                Tomato\n            </Box>\n    )\n}\ncoloringTheBox.story = {\n    parameters: {\n        info: {\n            text: `\n          Теперь \\`<Box />\\` имеет два параметра: **color** для задания цвета текста и **bg** для фона.\n        `\n        }\n    }\n}\n\nexport const MoreFunctions = () => {\n    return (\n        <Box color=\"#fff\" bg=\"tomato\" width={1/3} m={2} py={2} px={3} >\n            Tomato\n        </Box>\n    )\n}\nMoreFunctions.story = {\n    parameters: {\n        info: {\n            text: `\n          Добавим в Box еще несколько функций:\n            \n                import styled from 'styled-components'\n                import { color, space, width } from 'styled-system'\n                \n                const Box = styled.div\\`\n                  \\${color}\n                  \\${space}\n                  \\${width}\n                \\`\n                \n                export default Box\n          \n          Теперь мы можем управлять отступами и шириной блока\n        `\n        }\n    }\n}\n\nexport const spacing = () => {\n    return (\n        <Box color=\"#fff\" bg=\"purple\" width={1/3} m={3} py={3} px={3} >\n            Purple\n        </Box>\n    )\n}\nspacing.story = {\n    parameters: {\n        info: {\n            text: `\n            Функция **space** может брать значения из заранее прописанной сетки отступов в объекте темы:\n                    \n                    // theme.js\n                    export default {\n                      space: [\n                        0, 4, 8, 16, 32, 64, 128, 256, 512\n                      ]\n                    }\n                    \n            В примере выше для параметров **m** и **p** мы указали значение 3. Эта цифра является индексом элемента из массива **space** темы. То есть по факту мы записываем для компонента css:\n            \n                    {\n                      margin: 16px;\n                      padding: 16px;\n                    }\n            \n            Все свойства могут принимать значения number, string, array:\n            * Числа, превышающие длину массива отступов из темы, преобразуются в пиксели;\n            * Есть возможность передавать значения строкой, например 'auto' или '2em';\n            * Свойство margin может принимать отрицательные значения для задания негативного отступа;\n            * Массивы используются для адаптивного дизайна.\n            \n            Аналогичным образом работает функция **fontSize**, которая смотрит на массив fontSizes в обьекте темы. \n        `\n        }\n    }\n}\n\nexport const mediaQueriesAndBreakpoints = () => {\n    return (\n        <Box\n            bg={'purple'} color={'white'}\n            width={[\n                1,    // 100% телефоны\n                1/2,  // 50% планшеты\n                1/4   // 25% десктоп\n            ]}\n        >\n            // margin\n            <Text m={[ 0, 1, 2 ]} color={'white'}>Ima Text with responsive margins</Text>\n\n            // padding\n            <Text p={[ 2, 3, 4 ]} color={'white'}>Ima Text with responsive paddings</Text>\n\n            // font-size\n            <Text fontSize={[ 3, 4, 5 ]} color={'white'}>Ima Text with responsive fontSize</Text>\n            </Box>\n    )\n}\nmediaQueriesAndBreakpoints.story = {\n    parameters: {\n        info: {\n            text: `\n            ## Адаптивная верстка\n            Все функции из styled-system позволяют задать массив значений для различных размеров экранов.\n            \n            Брейкпоинты задаются в теме:\n               \n                // theme.js\n                const breakpoints = [420, 640, 1200, 1600]\n                const mediaQueries = breakpoints.map(width => \\`@media screen and (min-width: \\${width}px)\\`)\n                \n                export default {\n                  breakpoints,\n                  mediaQueries\n                }\n        `\n        }\n    }\n}\n\n",__ADDS_MAP__={"design-system-core--basic":{startLoc:{col:21,line:13},endLoc:{col:1,line:14},startBody:{col:21,line:13},endBody:{col:1,line:14}},"design-system-core--coloring-the-box":{startLoc:{col:30,line:37},endLoc:{col:1,line:43},startBody:{col:30,line:37},endBody:{col:1,line:43}},"design-system-core--more-functions":{startLoc:{col:29,line:54},endLoc:{col:1,line:60},startBody:{col:29,line:54},endBody:{col:1,line:60}},"design-system-core--spacing":{startLoc:{col:23,line:84},endLoc:{col:1,line:90},startBody:{col:23,line:84},endBody:{col:1,line:90}},"design-system-core--media-queries-and-breakpoints":{startLoc:{col:42,line:123},endLoc:{col:1,line:143},startBody:{col:42,line:123},endBody:{col:1,line:143}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},addSourceDecorator=__webpack_require__(160).addSource,Core_stories_ref=(__webpack_exports__.default={title:"Design System|Core",parameters:{storySource:{source:"import React, {useState} from 'react';\n\nimport {Core} from '../src/Core';\nimport {Flex, Box, Text, ContentBox} from \"@design-system/atoms\";\n\nexport default {\n    title: 'Design System|Core',\n    parameters: {\n        component: Core,\n    },\n};\n\nexport const basic = () => (<Core/>\n);\nbasic.story = {\n    parameters: {\n        info: {\n            text: `\n          ### Как это работает?\n          Создадим компонент Box и добавим в него функцию **color**:\n          \n              \n              import styled from 'styled-components'\n              import {color} from 'styled-system'\n              \n              const Box = styled.div\\`\n                  \\${color}\n                \\`\n              \n              export default Box\n\n        `\n        },\n    },\n};\n\nexport const coloringTheBox = () => {\n    return (\n            <Box color=\"#fff\" bg=\"tomato\">\n                Tomato\n            </Box>\n    )\n}\ncoloringTheBox.story = {\n    parameters: {\n        info: {\n            text: `\n          Теперь \\`<Box />\\` имеет два параметра: **color** для задания цвета текста и **bg** для фона.\n        `\n        }\n    }\n}\n\nexport const MoreFunctions = () => {\n    return (\n        <Box color=\"#fff\" bg=\"tomato\" width={1/3} m={2} py={2} px={3} >\n            Tomato\n        </Box>\n    )\n}\nMoreFunctions.story = {\n    parameters: {\n        info: {\n            text: `\n          Добавим в Box еще несколько функций:\n            \n                import styled from 'styled-components'\n                import { color, space, width } from 'styled-system'\n                \n                const Box = styled.div\\`\n                  \\${color}\n                  \\${space}\n                  \\${width}\n                \\`\n                \n                export default Box\n          \n          Теперь мы можем управлять отступами и шириной блока\n        `\n        }\n    }\n}\n\nexport const spacing = () => {\n    return (\n        <Box color=\"#fff\" bg=\"purple\" width={1/3} m={3} py={3} px={3} >\n            Purple\n        </Box>\n    )\n}\nspacing.story = {\n    parameters: {\n        info: {\n            text: `\n            Функция **space** может брать значения из заранее прописанной сетки отступов в объекте темы:\n                    \n                    // theme.js\n                    export default {\n                      space: [\n                        0, 4, 8, 16, 32, 64, 128, 256, 512\n                      ]\n                    }\n                    \n            В примере выше для параметров **m** и **p** мы указали значение 3. Эта цифра является индексом элемента из массива **space** темы. То есть по факту мы записываем для компонента css:\n            \n                    {\n                      margin: 16px;\n                      padding: 16px;\n                    }\n            \n            Все свойства могут принимать значения number, string, array:\n            * Числа, превышающие длину массива отступов из темы, преобразуются в пиксели;\n            * Есть возможность передавать значения строкой, например 'auto' или '2em';\n            * Свойство margin может принимать отрицательные значения для задания негативного отступа;\n            * Массивы используются для адаптивного дизайна.\n            \n            Аналогичным образом работает функция **fontSize**, которая смотрит на массив fontSizes в обьекте темы. \n        `\n        }\n    }\n}\n\nexport const mediaQueriesAndBreakpoints = () => {\n    return (\n        <Box\n            bg={'purple'} color={'white'}\n            width={[\n                1,    // 100% телефоны\n                1/2,  // 50% планшеты\n                1/4   // 25% десктоп\n            ]}\n        >\n            // margin\n            <Text m={[ 0, 1, 2 ]} color={'white'}>Ima Text with responsive margins</Text>\n\n            // padding\n            <Text p={[ 2, 3, 4 ]} color={'white'}>Ima Text with responsive paddings</Text>\n\n            // font-size\n            <Text fontSize={[ 3, 4, 5 ]} color={'white'}>Ima Text with responsive fontSize</Text>\n            </Box>\n    )\n}\nmediaQueriesAndBreakpoints.story = {\n    parameters: {\n        info: {\n            text: `\n            ## Адаптивная верстка\n            Все функции из styled-system позволяют задать массив значений для различных размеров экранов.\n            \n            Брейкпоинты задаются в теме:\n               \n                // theme.js\n                const breakpoints = [420, 640, 1200, 1600]\n                const mediaQueries = breakpoints.map(width => \\`@media screen and (min-width: \\${width}px)\\`)\n                \n                export default {\n                  breakpoints,\n                  mediaQueries\n                }\n        `\n        }\n    }\n}\n\n",locationsMap:{"design-system-core--basic":{startLoc:{col:21,line:13},endLoc:{col:1,line:14},startBody:{col:21,line:13},endBody:{col:1,line:14}},"design-system-core--coloring-the-box":{startLoc:{col:30,line:37},endLoc:{col:1,line:43},startBody:{col:30,line:37},endBody:{col:1,line:43}},"design-system-core--more-functions":{startLoc:{col:29,line:54},endLoc:{col:1,line:60},startBody:{col:29,line:54},endBody:{col:1,line:60}},"design-system-core--spacing":{startLoc:{col:23,line:84},endLoc:{col:1,line:90},startBody:{col:23,line:84},endBody:{col:1,line:90}},"design-system-core--media-queries-and-breakpoints":{startLoc:{col:42,line:123},endLoc:{col:1,line:143},startBody:{col:42,line:123},endBody:{col:1,line:143}}}},component:Core}},react_default.a.createElement(Core,null)),basic=addSourceDecorator((function(){return Core_stories_ref}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Core.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});basic.story={parameters:{info:{text:"\n          ### Как это работает?\n          Создадим компонент Box и добавим в него функцию **color**:\n          \n              \n              import styled from 'styled-components'\n              import {color} from 'styled-system'\n              \n              const Box = styled.div`\n                  ${color}\n                `\n              \n              export default Box\n\n        "}}};var _ref2=react_default.a.createElement(build.Box,{color:"#fff",bg:"tomato"},"Tomato"),coloringTheBox=addSourceDecorator((function(){return _ref2}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Core.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});coloringTheBox.story={parameters:{info:{text:"\n          Теперь `<Box />` имеет два параметра: **color** для задания цвета текста и **bg** для фона.\n        "}}};var _ref3=react_default.a.createElement(build.Box,{color:"#fff",bg:"tomato",width:1/3,m:2,py:2,px:3},"Tomato"),MoreFunctions=addSourceDecorator((function(){return _ref3}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Core.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});MoreFunctions.story={parameters:{info:{text:"\n          Добавим в Box еще несколько функций:\n            \n                import styled from 'styled-components'\n                import { color, space, width } from 'styled-system'\n                \n                const Box = styled.div`\n                  ${color}\n                  ${space}\n                  ${width}\n                `\n                \n                export default Box\n          \n          Теперь мы можем управлять отступами и шириной блока\n        "}}};var _ref4=react_default.a.createElement(build.Box,{color:"#fff",bg:"purple",width:1/3,m:3,py:3,px:3},"Purple"),spacing=addSourceDecorator((function(){return _ref4}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Core.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});spacing.story={parameters:{info:{text:"\n            Функция **space** может брать значения из заранее прописанной сетки отступов в объекте темы:\n                    \n                    // theme.js\n                    export default {\n                      space: [\n                        0, 4, 8, 16, 32, 64, 128, 256, 512\n                      ]\n                    }\n                    \n            В примере выше для параметров **m** и **p** мы указали значение 3. Эта цифра является индексом элемента из массива **space** темы. То есть по факту мы записываем для компонента css:\n            \n                    {\n                      margin: 16px;\n                      padding: 16px;\n                    }\n            \n            Все свойства могут принимать значения number, string, array:\n            * Числа, превышающие длину массива отступов из темы, преобразуются в пиксели;\n            * Есть возможность передавать значения строкой, например 'auto' или '2em';\n            * Свойство margin может принимать отрицательные значения для задания негативного отступа;\n            * Массивы используются для адаптивного дизайна.\n            \n            Аналогичным образом работает функция **fontSize**, которая смотрит на массив fontSizes в обьекте темы. \n        "}}};var mediaQueriesAndBreakpoints=addSourceDecorator((function(){return react_default.a.createElement(build.Box,{bg:"purple",color:"white",width:[1,.5,.25]},"// margin",react_default.a.createElement(build.Text,{m:[0,1,2],color:"white"},"Ima Text with responsive margins"),"// padding",react_default.a.createElement(build.Text,{p:[2,3,4],color:"white"},"Ima Text with responsive paddings"),"// font-size",react_default.a.createElement(build.Text,{fontSize:[3,4,5],color:"white"},"Ima Text with responsive fontSize"))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Core.stories.js",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});mediaQueriesAndBreakpoints.story={parameters:{info:{text:"\n            ## Адаптивная верстка\n            Все функции из styled-system позволяют задать массив значений для различных размеров экранов.\n            \n            Брейкпоинты задаются в теме:\n               \n                // theme.js\n                const breakpoints = [420, 640, 1200, 1600]\n                const mediaQueries = breakpoints.map(width => `@media screen and (min-width: ${width}px)`)\n                \n                export default {\n                  breakpoints,\n                  mediaQueries\n                }\n        "}}}},574:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__(8),__webpack_require__(20),__webpack_require__(37),__webpack_require__(42);var react__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__),_ref3=react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("div",null,"*"),TableComponent=function(_ref){_ref.propDefinitions.map((function(_ref2){var property=_ref2.property,propType=_ref2.propType,required=_ref2.required,description=_ref2.description,defaultValue=_ref2.defaultValue;if(void 0!==propType)return react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("tr",{key:property},react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td",null,property,required?_ref3:null),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td",null,propType.name),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td",null,defaultValue),react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement("td",null,description))}));return null};TableComponent.displayName="PropTable",TableComponent.propTypes={},TableComponent.defaultProps={},__webpack_exports__.a=TableComponent},581:function(module,exports,__webpack_require__){__webpack_require__(582),__webpack_require__(691),__webpack_require__(692),module.exports=__webpack_require__(939)},603:function(module,exports){},939:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){__webpack_require__(0);var _storybook_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(166),_storybook_addon_info__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(568),_storybook_addon_a11y__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(569),storybook_addon_styled_component_theme__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(570),_design_system_theme__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(76),_design_system_theme__WEBPACK_IMPORTED_MODULE_5___default=__webpack_require__.n(_design_system_theme__WEBPACK_IMPORTED_MODULE_5__),_TableStub__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(574);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.addDecorator)(Object(_storybook_addon_info__WEBPACK_IMPORTED_MODULE_2__.withInfo)({inline:!0,header:!1,source:!1,TableComponent:_TableStub__WEBPACK_IMPORTED_MODULE_6__.a,styles:{source:{h1:{display:"none"}},propTableHead:{display:"none",margin:"20px 0 0 0"}}})),Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.addDecorator)(_storybook_addon_a11y__WEBPACK_IMPORTED_MODULE_3__.withA11y),Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.addDecorator)(Object(storybook_addon_styled_component_theme__WEBPACK_IMPORTED_MODULE_4__.withThemesProvider)([_design_system_theme__WEBPACK_IMPORTED_MODULE_5___default.a])),Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__.configure)([__webpack_require__(1048),__webpack_require__(1049),__webpack_require__(1050)],module)}.call(this,__webpack_require__(495)(module))},942:function(module,exports,__webpack_require__){var map={"./nestedObjectAssign":496,"./nestedObjectAssign.js":496};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=942}},[[581,1,2]]]);
//# sourceMappingURL=main.9204d170aa1bcbad5f50.bundle.js.map